标题 2017.02.07 node.js
课程内容：
    node.js概念，安装
    node.js http模块用法示例讲解
    node.js 使用事件驱动，非阻塞I/O，适用于数据密集型应用及实时交互应用程序。

拓展：1、阻塞和非阻塞的理解

阻塞： 当写程序的时候，遇到一个大功能需要很长时间做完，但是突然有一个急需的小功能需要先完成，那么就会暂停大功能，先做小功能，这种方式称为 阻塞。当小功能做完了，再继续做大功能。这就是通常的同步式 （Synchronous）或阻塞式 （Blocking）。
非阻塞：异步式  （Asynchronous ）或非阻塞式  （Non-blocking ）则针对所有要完成的功能都不采用阻塞的策略。当线程遇到操作时，不会以阻塞的方式等待  操作的完成或数据的返回，而只是将 请求发送给操作系统，继续执行下一条语句。当操作系统完成 操作时，以事件的形式通知执行 操作的线程，
线程会在特定时候处理这个事件。为了处理异步，线程必须有事件循环，不断地检查有没有未处理的事件，依次予以处理。

塞模式下，一个线程只能处理一项任务，要想提高吞吐量必须通过多线程。而非阻塞模式下，一个线程永远在执行计算操作，这个线程所使用的 CPU 核心利用率永远是 100%。在阻塞模式下，多线程往往能提高系统吞吐量，因为一个线程阻塞时还有其他线程在工作，多线程可以让 CPU 资源不被阻塞中的线程浪费。
而在非阻塞模式下，线程不会被阻塞，永远在利用 CPU。多线程带来的好处仅仅是在多核 CPU 的情况下利用更多的核，而Node.js 使用了单线程、非阻塞的事件编程模式也能带来同样的好处。

2、什么是端口？
在Internet上，各主机间通过TCP/TP协议发送和接收数据报，各个数据报根据其目的主机的ip地址来进行互联网络中的路由选择

作业：已提交

心得体会：
这几天对封装越来越有感觉，用起来也很顺手，返回来看年前的封装，有些还是可以进行整理的。用封装可以减少很多的代码量，
总之，没有什么不会的，就看有没有用心去思考，遇到问题的时候不要畏惧，而是打log慢慢查，定位问题在哪里？这样攻克的越多，越有成就感。有时候遇到问题今天解决不了，
不要太着急，或许明天就有新的想法思路。